{"project":{"profile":{"name":"soutland_benefit_temp","description":""},"commands":[{"father":"use","command":"{\"tipo\":\"0\",\"url\":\"{url_site}\"}","option":"chrome","var":"","index":0,"group":"web","execute":2,"if":"","children":[],"else":[],"id":"0d5b911b-2f21-3e22-04dd-86ad8ec1df6f","mode_live":true,"getvar":"","screenshot":"","data_":{"tipo":"0","url":"{url_site}"},"img":"","message":"use chrome {\"tipo\":\"0\",\"url\":\"https://portal.southlandbenefit.com/\"}","extra":[],"result":"True"},{"father":"maximize","command":"","option":"","var":"","index":1,"group":"web","execute":2,"if":"","children":[],"else":[],"id":"d3418da1-2cf1-dfcc-7b0e-78977ee7b544","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"maximize  ","extra":[],"result":"True"},{"father":"module","command":"{\"module_name\":\"webpro\",\"module\":\"clickPro\",\"data_type\":\"id\",\"data\":\"login\",\"wait\":\"5\"}","option":"","var":"","index":2,"group":"scripts","execute":2,"if":"","children":[],"else":[],"id":"5bb42d09-3b7a-5a28-585d-cd5a1f4b6d1b","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"module  {\"module_name\":\"webpro\",\"module\":\"clickPro\",\"data_type\":\"id\",\"data\":\"login\",\"wait\":\"5\"}","extra":[],"result":"True"},{"father":"module","command":"{\"module_name\":\"webpro\",\"module\":\"CleanInputs\",\"texto\":\"{username}\",\"search_data\":\"userID\",\"tipo\":\"id\"}","option":"","var":"","index":3,"group":"scripts","execute":2,"if":"","children":[],"else":[],"id":"7b538b61-1b58-bf97-2837-a9f587559108","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"module  {\"module_name\":\"webpro\",\"module\":\"CleanInputs\",\"texto\":\"{username}\",\"search_data\":\"userID\",\"tipo\":\"id\"}","extra":[],"result":"True"},{"father":"module","command":"{\"module_name\":\"webpro\",\"module\":\"clickPro\",\"data_type\":\"id\",\"data\":\"login.button.next\",\"wait\":\"5\"}","option":"","var":"","index":4,"group":"scripts","execute":2,"if":"","children":[],"else":[],"id":"fb74268f-f0dc-8345-fec9-e8bcd3045924","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"module  {\"module_name\":\"webpro\",\"module\":\"clickPro\",\"data_type\":\"id\",\"data\":\"login.button.next\",\"wait\":\"5\"}","extra":[],"result":"True"},{"father":"module","command":"{\"module_name\":\"webpro\",\"module\":\"CleanInputs\",\"texto\":\"{password}\",\"search_data\":\"password\",\"tipo\":\"id\"}","option":"","var":"","index":5,"group":"scripts","execute":2,"if":"","children":[],"else":[],"id":"fff7dd35-9140-936e-1a2e-952e27fbb58d","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"module  {\"module_name\":\"webpro\",\"module\":\"CleanInputs\",\"texto\":\"{password}\",\"search_data\":\"password\",\"tipo\":\"id\"}","extra":[],"result":"True"},{"father":"module","command":"{\"module_name\":\"webpro\",\"module\":\"clickPro\",\"data_type\":\"id\",\"data\":\"login.button.login\",\"wait\":\"5\"}","option":"","var":"","index":6,"group":"scripts","execute":2,"if":"","children":[],"else":[],"id":"70ca63cb-a6a2-3da2-5423-8315afad8894","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"module  {\"module_name\":\"webpro\",\"module\":\"clickPro\",\"data_type\":\"id\",\"data\":\"login.button.login\",\"wait\":\"5\"}","extra":[],"result":"True"},{"father":"waitforobject","command":"{\"object\":\"gwp-page-content\",\"wait_for\":\"present\",\"wait_time\":\"10\",\"before\":0,\"after\":\"1\"}","option":"class","var":"","index":7,"group":"web","execute":2,"if":"","children":[],"else":[],"id":"0aedc919-4714-fd1f-dc13-52513a115ac2","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"waitforobject class {\"object\":\"gwp-page-content\",\"wait_for\":\"present\",\"wait_time\":\"10\",\"before\":0,\"after\":\"1\"}","extra":[],"result":"True"},{"father":"execJs","command":"// Se almacenan los datos del paciente\nconst memberID = \"{member_id}\";\nconst groupID = \"{group_id}\";\n\n\n// Seleccionamos el primero metodo de busqueda por member id y group id\nconst selectSearchMethod = document.getElementById('mycbfilterBy');\nselectSearchMethod.value = 'bygroupprovider';\nselectSearchMethod.dispatchEvent(new Event('change'));\n\n// Aseguramos que los inputs esten disponibles\nconst groupInputsMethod1 = document.getElementById('bygroupprovider');\ntry {\n    await waitForElement(groupInputsMethod1);\n} catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Colocamos el member id y group id en los inputs\nconst memberIDInput = document.getElementById('as_memberIdentifier');\nconst groupIDInput = document.getElementById('groupNum');\nmemberIDInput.value = memberID;\ngroupIDInput.value = groupID;\n\nconst retrieveButton = document.getElementById('asRetrieve');\nconst tableResults = document.querySelector('#asTableGroup4provider > tbody');\nretrieveButton.click();\n\n// Se comprueba que la tabla ha sido renderizada\ntry {\n    await waitForTable(tableResults,retrieveButton);\n    if (tableResults.innerText.toLowerCase().includes('no data available in table')) {\n        console.log('No hay pacientes con esos datos');\n        return 'NOT FOUND';\n    }else{\n        console.log('Paciente encontrado');\n        return 'SUCCESS'\n    }\n}catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Funcion que obliga al script a esperar que los inputs esten visibles antes de proceder\nfunction waitForElement(element) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la propiedad display del elemento sea distinto None\n    return new Promise((resolve, reject) => {\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la propiedad display es distinto de None\n        const intervalForDisplay = setInterval(() => {\n            const computedStyle = window.getComputedStyle(element);\n            const display = computedStyle.display;\n\n            if (display !== 'none') { // Salida del intervalo en cado de exito\n                console.log('Elemento visible');\n                clearInterval(intervalForDisplay);\n                resolve();\n            } else {\n                console.log('Elemento no visible');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                reject();\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}\n\nfunction waitForTable(tableElement, elementToClick) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la tabla tenga un cambio de renderizado\n    return new Promise((resolve, reject) => {\n        let status = false;\n        // AÃ±adimos un eventlistener que escuche por el evento DOMNodeInserted y cambie el status cuando se ejecute\n        const handleRender = (event) => {\n            console.log('El elemento ha sido renderizado de nuevo');\n            status = true;\n        };\n        tableElement.addEventListener('DOMNodeInserted', handleRender);\n        elementToClick.click();\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la tabla sufrio un nuevo renderizado\n        const intervalForDisplay = setInterval(() => {\n\n            if (status === true) { // Salida del intervalo en cado de exito\n                console.log('Tabla renderizada');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                resolve();\n            } else {\n                console.log('Tabla aun no renderizada');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                reject('No se renderizo el elemento');\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}","option":"","var":"","index":8,"group":"web","execute":2,"if":"","description":"Busca el paciente usando member_id y group_id","children":[],"else":[],"id":"1d18bd3a-d5a8-b000-253d-29194d3d5139","mode_live":true,"getvar":"search_result","extra_data":null,"screenshot":"","img":"","message":"execjs  // Se almacenan los datos del paciente\nconst memberID = \"2017146723\";\nconst groupID = \"0000001000\";\n\n\n// Seleccionamos el primero metodo de busqueda por member id y group id\nconst selectSearchMethod = document.getElementById('mycbfilterBy');\nselectSearchMethod.value = 'bygroupprovider';\nselectSearchMethod.dispatchEvent(new Event('change'));\n\n// Aseguramos que los inputs esten disponibles\nconst groupInputsMethod1 = document.getElementById('bygroupprovider');\ntry {\n    await waitForElement(groupInputsMethod1);\n} catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Colocamos el member id y group id en los inputs\nconst memberIDInput = document.getElementById('as_memberIdentifier');\nconst groupIDInput = document.getElementById('groupNum');\nmemberIDInput.value = memberID;\ngroupIDInput.value = groupID;\n\nconst retrieveButton = document.getElementById('asRetrieve');\nconst tableResults = document.querySelector('#asTableGroup4provider > tbody');\nretrieveButton.click();\n\n// Se comprueba que la tabla ha sido renderizada\ntry {\n    await waitForTable(tableResults,retrieveButton);\n    if (tableResults.innerText.toLowerCase().includes('no data available in table')) {\n        console.log('No hay pacientes con esos datos');\n        return 'NOT FOUND';\n    }else{\n        console.log('Paciente encontrado');\n        return 'SUCCESS'\n    }\n}catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Funcion que obliga al script a esperar que los inputs esten visibles antes de proceder\nfunction waitForElement(element) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la propiedad display del elemento sea distinto None\n    return new Promise((resolve, reject) => {\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la propiedad display es distinto de None\n        const intervalForDisplay = setInterval(() => {\n            const computedStyle = window.getComputedStyle(element);\n            const display = computedStyle.display;\n\n            if (display !== 'none') { // Salida del intervalo en cado de exito\n                console.log('Elemento visible');\n                clearInterval(intervalForDisplay);\n                resolve();\n            } else {\n                console.log('Elemento no visible');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                reject();\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}\n\nfunction waitForTable(tableElement, elementToClick) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la tabla tenga un cambio de renderizado\n    return new Promise((resolve, reject) => {\n        let status = false;\n        // AÃ±adimos un eventlistener que escuche por el evento DOMNodeInserted y cambie el status cuando se ejecute\n        const handleRender = (event) => {\n            console.log('El elemento ha sido renderizado de nuevo');\n            status = true;\n        };\n        tableElement.addEventListener('DOMNodeInserted', handleRender);\n        elementToClick.click();\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la tabla sufrio un nuevo renderizado\n        const intervalForDisplay = setInterval(() => {\n\n            if (status === true) { // Salida del intervalo en cado de exito\n                console.log('Tabla renderizada');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                resolve();\n            } else {\n                console.log('Tabla aun no renderizada');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                reject('No se renderizo el elemento');\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}","extra":[],"result":"True"},{"father":"setVar","command":"{search_result}.decode()","option":"","var":"search_result","index":9,"group":"system","execute":2,"if":"","children":[],"else":[],"id":"88d95239-5c21-caf4-e754-1ae067d469e0","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"setvar  b'SUCCESS'.decode()","extra":[],"result":"True"},{"father":"alert","command":"{search_result}","option":"","var":"","index":10,"group":"desktop","execute":2,"if":"","children":[],"else":[],"id":"0196e2ce-a461-aa60-a504-ac0be4d827a8","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"alert  {search_result}","extra":[],"result":"True"},{"father":"evaluateIf","command":"\"{search_result}\" == \"SUCCESS\"","option":"","var":"","index":11,"group":"logic","execute":2,"if":"","children":[{"father":"alert","command":"Encontrado, selecciona el row correcto","option":"","var":"","index":0,"group":"desktop","execute":2,"if":"","children":[],"else":[],"id":"73df73ec-1ee0-10e0-dee7-f09aa13955dd","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"alert  Encontrado, selecciona el row correcto","extra":[],"result":"True"},{"father":"execJs","command":"const patientName = \"{patient_name}\";\nconst patientLastName = \"{patient_last_name}\";\nconst patientDOB = \"{patient_dob}\";\n\nlet table = document.getElementById(\"asTableGroup4provider\")\nlet thead = table.querySelector(\"thead\")\nlet tbody = table.querySelector(\"tbody\")\n\nlet memberNameIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Member Name\"))\nlet memberDobIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Date of Birth\"))\n\nArray.from(tbody.children).forEach(tr =>{\n    let tds = Array.from(tr.children)\n    let str = patientName + \" \" + patientLastName\n    \n    if(tds[memberNameIdx].innerText.toLowerCase() === str.toLowerCase() && tds[memberDobIdx].innerText === patientDOB){\n        tr.querySelector(\"a\").click()\n    }\n})","option":"","var":"","index":1,"group":"web","execute":2,"if":"","children":[],"else":[],"id":"e07d1a3b-c68c-e6c0-2bf6-97b3b70f5fa1","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"execjs  const patientName = \"ANN\";\nconst patientLastName = \"BEALE\";\nconst patientDOB = \"04/22/1954\";\n\nlet table = document.getElementById(\"asTableGroup4provider\")\nlet thead = table.querySelector(\"thead\")\nlet tbody = table.querySelector(\"tbody\")\n\nlet memberNameIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Member Name\"))\nlet memberDobIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Date of Birth\"))\n\nArray.from(tbody.children).forEach(tr =>{\n    let tds = Array.from(tr.children)\n    let str = patientName + \" \" + patientLastName\n    \n    if(tds[memberNameIdx].innerText.toLowerCase() === str.toLowerCase() && tds[memberDobIdx].innerText === patientDOB){\n        tr.querySelector(\"a\").click()\n    }\n})","extra":[],"result":"True"}],"else":[{"father":"evaluateIf","command":"\"{search_result}\" == \"NOT FOUND\" or \"{search_result}\" == \"FAILED TO LOAD RESOURCE AT SITE\"","option":"","var":"","index":0,"group":"logic","execute":2,"if":"","else":[],"id":"8e54821d-559b-4ea0-7d7c-293279ade133","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","children":[{"father":"alert","command":"No se encontro data o error al cargar prueba el segundo metodo","option":"","var":"","index":0,"group":"desktop","execute":2,"if":"","children":[],"else":[],"id":"47df45a9-da40-3baf-aa5d-9e6adcd06fc7","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"alert  No se encontro data o error al cargar prueba el segundo metodo","extra":[],"result":"True"},{"father":"execJs","command":"// Se almacenan los datos del paciente\nconst patientName = \"{patient_name}\";\nconst patientLastName = \"{patient_last_name}\";\nconst patientDOB = \"{patient_dob}\";\n\n// Seleccionamos el primero metodo de busqueda por nombre, apellido y dob\nconst selectSearchMethod = document.getElementById('mycbfilterBy');\nselectSearchMethod.value = 'bynameprovider';\nselectSearchMethod.dispatchEvent(new Event('change'));\n\n// Aseguramos que los inputs esten disponibles\nconst groupInputsMethod2 = document.getElementById('name');\ntry {\n    await waitForElement(groupInputsMethod2);\n} catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Ingresamos los datos en el sitio\nconst inputLastName = document.getElementById('as_lastName');\nconst inputName = document.getElementById('as_firstName');\nconst inputDOB = document.getElementById('patientdateofbirth');\ninputLastName.value = patientLastName;\ninputName.value = patientName;\ninputDOB.value = patientDOB;\nconst retrieveButton = document.getElementById('asRetrieve');\nconst tableResults = document.querySelector('#asTableGroup4provider > tbody');\n\n\n//Esperamos cambios en la tabla despues de dar click\ntry {\n    await waitForTable(tableResults, retrieveButton);\n    if (tableResults.innerText.toLowerCase().includes('no data available in table')) {\n        console.log('No hay pacientes con esos datos');\n        return 'NOT FOUND';\n    }else{\n        console.log('Paciente encontrado');\n        return 'SUCCESS'\n    }\n}catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Funcion que obliga al script a esperar que los inputs esten visibles antes de proceder\nfunction waitForElement(element) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la propiedad display del elemento sea distinto None\n    return new Promise((resolve, reject) => {\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la propiedad display es distinto de None\n\n        const intervalForDisplay = setInterval(() => {\n            const computedStyle = window.getComputedStyle(element);\n            const display = computedStyle.display;\n\n            if (display !== 'none') { // Salida del intervalo en cado de exito\n                console.log('Elemento visible');\n                clearInterval(intervalForDisplay);\n                resolve();\n            } else {\n                console.log('Elemento no visible');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                reject();\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}\n\n// Funcion que espera por el renderizado de una tabla\nfunction waitForTable(tableElement, elementToClick) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la tabla tenga un cambio de renderizado\n    return new Promise((resolve, reject) => {\n        let status = false;\n        // AÃ±adimos un eventlistener que escuche por el evento DOMNodeInserted y cambie el status cuando se ejecute\n        const handleRender = (event) => {\n            console.log('El elemento ha sido renderizado de nuevo');\n            status = true;\n        };\n        tableElement.addEventListener('DOMNodeInserted', handleRender);\n        elementToClick.click();\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la tabla sufrio un nuevo renderizado\n        const intervalForDisplay = setInterval(() => {\n\n            if (status === true) { // Salida del intervalo en cado de exito\n                console.log('Tabla renderizada');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                resolve();\n            } else {\n                console.log('Tabla aun no renderizada');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                reject('No se renderizo el elemento');\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}","option":"","var":"","index":1,"group":"web","execute":2,"if":"","children":[],"else":[],"id":"9b29fc00-a488-1fcf-534b-478ecc0963e4","mode_live":true,"getvar":"search_result","extra_data":null,"screenshot":"","img":"","message":"execjs  // Se almacenan los datos del paciente\nconst patientName = \"ANN\";\nconst patientLastName = \"BEALE\";\nconst patientDOB = \"04/22/1954\";\n\n// Seleccionamos el primero metodo de busqueda por nombre, apellido y dob\nconst selectSearchMethod = document.getElementById('mycbfilterBy');\nselectSearchMethod.value = 'bynameprovider';\nselectSearchMethod.dispatchEvent(new Event('change'));\n\n// Aseguramos que los inputs esten disponibles\nconst groupInputsMethod2 = document.getElementById('name');\ntry {\n    await waitForElement(groupInputsMethod2);\n} catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Ingresamos los datos en el sitio\nconst inputLastName = document.getElementById('as_lastName');\nconst inputName = document.getElementById('as_firstName');\nconst inputDOB = document.getElementById('patientdateofbirth');\ninputLastName.value = patientLastName;\ninputName.value = patientName;\ninputDOB.value = patientDOB;\nconst retrieveButton = document.getElementById('asRetrieve');\nconst tableResults = document.querySelector('#asTableGroup4provider > tbody');\n\n\n//Esperamos cambios en la tabla despues de dar click\ntry {\n    await waitForTable(tableResults, retrieveButton);\n    if (tableResults.innerText.toLowerCase().includes('no data available in table')) {\n        console.log('No hay pacientes con esos datos');\n        return 'NOT FOUND';\n    }else{\n        console.log('Paciente encontrado');\n        return 'SUCCESS'\n    }\n}catch (error) {\n    console.error(error);\n    return 'FAILED TO LOAD RESOURCE AT SITE';\n}\n\n// Funcion que obliga al script a esperar que los inputs esten visibles antes de proceder\nfunction waitForElement(element) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la propiedad display del elemento sea distinto None\n    return new Promise((resolve, reject) => {\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la propiedad display es distinto de None\n\n        const intervalForDisplay = setInterval(() => {\n            const computedStyle = window.getComputedStyle(element);\n            const display = computedStyle.display;\n\n            if (display !== 'none') { // Salida del intervalo en cado de exito\n                console.log('Elemento visible');\n                clearInterval(intervalForDisplay);\n                resolve();\n            } else {\n                console.log('Elemento no visible');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                reject();\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}\n\n// Funcion que espera por el renderizado de una tabla\nfunction waitForTable(tableElement, elementToClick) {\n    let maxTimeMS = 10000; // Tiempo maximo 10s\n\n    // Retorna una promesa que espera que la tabla tenga un cambio de renderizado\n    return new Promise((resolve, reject) => {\n        let status = false;\n        // AÃ±adimos un eventlistener que escuche por el evento DOMNodeInserted y cambie el status cuando se ejecute\n        const handleRender = (event) => {\n            console.log('El elemento ha sido renderizado de nuevo');\n            status = true;\n        };\n        tableElement.addEventListener('DOMNodeInserted', handleRender);\n        elementToClick.click();\n        // Se utilizan intervalos de tiempo de 500 ms\n        // Cada 500 ms se comprobara si la tabla sufrio un nuevo renderizado\n        const intervalForDisplay = setInterval(() => {\n\n            if (status === true) { // Salida del intervalo en cado de exito\n                console.log('Tabla renderizada');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                resolve();\n            } else {\n                console.log('Tabla aun no renderizada');\n            }\n            if (maxTimeMS <= 0) { // Salida del intervalo en caso de tiempo agotado\n                console.log('Tiempo agotado');\n                clearInterval(intervalForDisplay);\n                tableElement.removeEventListener('DOMNodeInserted', handleRender);\n                reject('No se renderizo el elemento');\n            }\n            maxTimeMS -= 500;\n        }, 500);\n    })\n}","extra":[],"result":"True"},{"father":"setVar","command":"{search_result}.decode()","option":"","var":"search_result","index":2,"group":"system","execute":2,"if":"","children":[],"else":[],"id":"dbad9ce1-51fb-f1d0-83d0-b411da8de33f","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"setvar  b'SUCCESS'.decode()","extra":[],"result":"True"},{"father":"evaluateIf","command":"\"{search_result}\" == \"SUCCESS\"","option":"","var":"","index":3,"group":"logic","execute":2,"if":"","else":[{"father":"evaluateIf","command":"\"{search_result}\" == \"NOT FOUND\"","option":"","var":"","index":0,"group":"logic","execute":2,"if":"","children":[{"father":"alert","command":"PACIENTE NO ENCONTRADO, SETEA EL STATUS","option":"","var":"","index":0,"group":"desktop","execute":2,"if":"","children":[],"else":[],"id":"313f0e64-e781-21a0-1616-8aa6934d45d1","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"alert  PACIENTE NO ENCONTRADO, SETEA EL STATUS","extra":[],"result":"True"}],"else":[{"father":"alert","command":"Problema al cargar datos del sitio, setea el status","option":"","var":"","index":0,"group":"desktop","execute":2,"if":"","children":[],"else":[],"id":"ba9ce94a-7ea3-e77a-6611-5ab9fd18ae66","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"alert  Problema al cargar datos del sitio, setea el status","extra":[],"result":"True"}],"id":"bb30308c-6336-af84-8872-98f9ce5ef2ca","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"evaluateif  \"FAILED TO LOAD RESOURCE AT SITE\" == \"NOT FOUND\"","extra":{"res":"False"},"result":"True","minimize":false}],"id":"f11fd126-51b9-6eba-36a3-db177719f2b3","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"evaluateif  \"SUCCESS\" == \"SUCCESS\"","extra":{"res":"True"},"result":"True","minimize":false,"children":[{"father":"alert","command":"Data encontrada, busca el row correcto","option":"","var":"","index":0,"group":"desktop","execute":2,"if":"","children":[],"else":[],"id":"56ce528e-c6ee-341f-cb67-77f832d820ad","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"alert  Data encontrada, busca el row correcto","extra":[],"result":"True"},{"father":"execJs","command":"const patientName = \"{patient_name}\";\nconst patientLastName = \"{patient_last_name}\";\nconst patientDOB = \"{patient_dob}\";\n\nlet table = document.getElementById(\"asTableGroup4provider\")\nlet thead = table.querySelector(\"thead\")\nlet tbody = table.querySelector(\"tbody\")\n\nlet memberNameIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Member Name\"))\nlet memberDobIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Date of Birth\"))\n\nArray.from(tbody.children).forEach(tr =>{\n    let tds = Array.from(tr.children)\n    let str = patientName + \" \" + patientLastName\n    \n    if(tds[memberNameIdx].innerText.toLowerCase() === str.toLowerCase() && tds[memberDobIdx].innerText === patientDOB){\n        tr.querySelector(\"a\").click()\n    }\n})","option":"","var":"","index":1,"group":"web","execute":2,"if":"","children":[],"else":[],"id":"11300bc4-cb97-049f-231d-b901a548d489","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"execjs  const patientName = \"ANN\";\nconst patientLastName = \"BEALE\";\nconst patientDOB = \"04/22/1954\";\n\nlet table = document.getElementById(\"asTableGroup4provider\")\nlet thead = table.querySelector(\"thead\")\nlet tbody = table.querySelector(\"tbody\")\n\nlet memberNameIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Member Name\"))\nlet memberDobIdx = Array.from(thead.querySelector(\"tr\").children).findIndex(i => i.innerText.includes(\"Date of Birth\"))\n\nArray.from(tbody.children).forEach(tr =>{\n    let tds = Array.from(tr.children)\n    let str = patientName + \" \" + patientLastName\n    \n    if(tds[memberNameIdx].innerText.toLowerCase() === str.toLowerCase() && tds[memberDobIdx].innerText === patientDOB){\n        tr.querySelector(\"a\").click()\n    }\n})","extra":[],"result":"True"}]}],"message":"evaluateif  \"NOT FOUND\" == \"NOT FOUND\" or \"NOT FOUND\" == \"FAILED TO LOAD RESOURCE AT SITE\"","extra":{"res":"True"},"result":"True","minimize":false}],"id":"a59f43f3-4a16-7d5a-b7c2-3e9b23e13fbf","mode_live":true,"getvar":"","extra_data":null,"screenshot":"","img":"","message":"evaluateif  \"SUCCESS\" == \"SUCCESS\"","extra":{"res":"True"},"result":"True","minimize":false,"minimize_else":false}],"vars":[{"name":"url_site","data":"https://portal.southlandbenefit.com/","type":"string","$$hashKey":"object:7941"},{"name":"username","data":"brkwdendo","type":"string","$$hashKey":"object:7942"},{"name":"password","data":"8709441Br!","type":"string","$$hashKey":"object:7943"},{"name":"patient_name","data":"ANN","type":"string","$$hashKey":"object:7944"},{"name":"patient_last_name","data":"BEALE","type":"string","$$hashKey":"object:7945"},{"name":"patient_dob","data":"04/22/1954","type":"string","$$hashKey":"object:7946"},{"name":"member_id","data":"2017146723","type":"string","$$hashKey":"object:7947"},{"name":"group_id","data":"0000001000","type":"string","$$hashKey":"object:7948"},{"name":"search_result","data":"SUCCESS","type":"string","$$hashKey":"object:7949"}],"ifs":[{"id":"ab40cab1-676a-d745-7738-5892b64c3cf8","status":null},{"id":"1a489aad-d6ea-e40a-e034-d0c857715b0a","status":null},{"id":"6d6caafc-249b-513e-9d70-05e00abb0ca5","status":null},{"id":"f49c121d-451e-07c6-3863-927440087fd0","status":null},{"id":"adc83e5d-2d1e-96e2-13c6-2126d9d41a51","status":null},{"id":"4eca86d9-e727-ffac-9c71-a27099a6af6a","status":null},{"id":"d2dec544-58a2-a2d4-2a4d-ad1770bc86e1","status":null},{"id":"bb256f21-10fd-6641-facb-74c15c72ac97","status":null},{"id":"41257cd5-cb5e-87bc-cac2-600fe485f4df","status":null}]}}